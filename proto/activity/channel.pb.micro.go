// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/activity/channel.proto

package activity

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Channel service

type ChannelService interface {
	// 订阅
	Subscribe(ctx context.Context, in *ChannelSubRequest, opts ...client.CallOption) (*BlankResponse, error)
	// 取消订阅
	Unsubscribe(ctx context.Context, in *ChannelUnsubRequest, opts ...client.CallOption) (*BlankResponse, error)
	// 获取列表
	Fetch(ctx context.Context, in *ChannelFetchRequest, opts ...client.CallOption) (*ChannelFetchResponse, error)
}

type channelService struct {
	c    client.Client
	name string
}

func NewChannelService(name string, c client.Client) ChannelService {
	return &channelService{
		c:    c,
		name: name,
	}
}

func (c *channelService) Subscribe(ctx context.Context, in *ChannelSubRequest, opts ...client.CallOption) (*BlankResponse, error) {
	req := c.c.NewRequest(c.name, "Channel.Subscribe", in)
	out := new(BlankResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelService) Unsubscribe(ctx context.Context, in *ChannelUnsubRequest, opts ...client.CallOption) (*BlankResponse, error) {
	req := c.c.NewRequest(c.name, "Channel.Unsubscribe", in)
	out := new(BlankResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *channelService) Fetch(ctx context.Context, in *ChannelFetchRequest, opts ...client.CallOption) (*ChannelFetchResponse, error) {
	req := c.c.NewRequest(c.name, "Channel.Fetch", in)
	out := new(ChannelFetchResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Channel service

type ChannelHandler interface {
	// 订阅
	Subscribe(context.Context, *ChannelSubRequest, *BlankResponse) error
	// 取消订阅
	Unsubscribe(context.Context, *ChannelUnsubRequest, *BlankResponse) error
	// 获取列表
	Fetch(context.Context, *ChannelFetchRequest, *ChannelFetchResponse) error
}

func RegisterChannelHandler(s server.Server, hdlr ChannelHandler, opts ...server.HandlerOption) error {
	type channel interface {
		Subscribe(ctx context.Context, in *ChannelSubRequest, out *BlankResponse) error
		Unsubscribe(ctx context.Context, in *ChannelUnsubRequest, out *BlankResponse) error
		Fetch(ctx context.Context, in *ChannelFetchRequest, out *ChannelFetchResponse) error
	}
	type Channel struct {
		channel
	}
	h := &channelHandler{hdlr}
	return s.Handle(s.NewHandler(&Channel{h}, opts...))
}

type channelHandler struct {
	ChannelHandler
}

func (h *channelHandler) Subscribe(ctx context.Context, in *ChannelSubRequest, out *BlankResponse) error {
	return h.ChannelHandler.Subscribe(ctx, in, out)
}

func (h *channelHandler) Unsubscribe(ctx context.Context, in *ChannelUnsubRequest, out *BlankResponse) error {
	return h.ChannelHandler.Unsubscribe(ctx, in, out)
}

func (h *channelHandler) Fetch(ctx context.Context, in *ChannelFetchRequest, out *ChannelFetchResponse) error {
	return h.ChannelHandler.Fetch(ctx, in, out)
}
