// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/activity/channel.proto

package activity

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Record service

type RecordService interface {
	// 获取列表
	Fetch(ctx context.Context, in *RecordFetchRequest, opts ...client.CallOption) (*RecordFetchResponse, error)
}

type recordService struct {
	c    client.Client
	name string
}

func NewRecordService(name string, c client.Client) RecordService {
	return &recordService{
		c:    c,
		name: name,
	}
}

func (c *recordService) Fetch(ctx context.Context, in *RecordFetchRequest, opts ...client.CallOption) (*RecordFetchResponse, error) {
	req := c.c.NewRequest(c.name, "Record.Fetch", in)
	out := new(RecordFetchResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Record service

type RecordHandler interface {
	// 获取列表
	Fetch(context.Context, *RecordFetchRequest, *RecordFetchResponse) error
}

func RegisterRecordHandler(s server.Server, hdlr RecordHandler, opts ...server.HandlerOption) error {
	type record interface {
		Fetch(ctx context.Context, in *RecordFetchRequest, out *RecordFetchResponse) error
	}
	type Record struct {
		record
	}
	h := &recordHandler{hdlr}
	return s.Handle(s.NewHandler(&Record{h}, opts...))
}

type recordHandler struct {
	RecordHandler
}

func (h *recordHandler) Fetch(ctx context.Context, in *RecordFetchRequest, out *RecordFetchResponse) error {
	return h.RecordHandler.Fetch(ctx, in, out)
}
